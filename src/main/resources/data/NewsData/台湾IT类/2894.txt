導讀：對於從PHP轉到Node.js的作者而言，Node.js編輯完代碼後必須重啓真是件麻煩事。在不重啓情況下熱更新Node.js代碼，是本文重要討論的話題。而解決該問題，Java的引用成爲了關鍵。層層剖析，抽絲剝繭，帶你瞭解問題本質及解決之道。

早期學習Node.js的時候，有挺多是從PHP轉過來的，當時有部分人對於Node.js編輯完代碼需要重啓一下表示麻煩（PHP不需要這個過程），於是社區裏的朋友就開始提倡使用node-supervisor這個模塊來啓動項目，可以編輯完代碼之後自動重啓。不過相對於PHP而言依舊不夠方便，因爲Node.js在重啓以後，之前的上下文都丟失了。

雖然可以通過將session數據保存在數據庫或者緩存中來減少重啓過程中的數據丟失，不過如果是在生產的情況下，更新代碼的重啓間隙是沒法處理請求的（PHP可以，另外那個時候還沒有cluster）。由於這方面的問題，加上本人是從PHP轉到Node.js的，於是從那時開始思考，有沒有辦法可以在不重啓的情況下熱更新Node.js的代碼。

最開始把目光瞄向了require這個模塊。想法很簡單，因爲Node.js中引入一個模塊都是通過require這個方法加載的。於是就開始思考require能不能在更新代碼之後再次require一下。嘗試如下：

兩個JS文件寫好之後，從a.js啓動，刷新頁面會輸出b.js中的1024，然後修改b.js文件中導出的值，例如修改爲2048。再次刷新頁面依舊是原本的1024。

再次執行一次require並沒有刷新代碼。require在執行的過程中加載完代碼之後會把模塊導出的數據放在require.cache中。require.cache是一個{}對象，以模塊的絕對路徑爲key，該模塊的詳細數據爲value。於是便開始做如下嘗試：

再次require之前，將require之上關於該模塊的cache清理掉後，用之前的方法再次測試。結果發現，可以成功的刷新b.js的代碼，輸出新修改的值。

瞭解到這個點後，就想通過該原理實現一個無重啓熱更新版本的node-supervisor。在封裝模塊的過程中，出於情懷的原因，考慮提供一個類似PHP中include的函數來代替require去引入一個模塊。實際內部依舊是使用require去加載。以b.js爲例，原本的寫法改爲varb=include(‘./b’)，在文件b.js更新之後include內部可以自動刷新，讓外面拿到最新的代碼。

但是實際的開發過程中，這樣很快就碰到了問題。我們希望的代碼可能是這樣：

但按照這個目標封裝include的時候，我們發現了問題。無論我們在include.js內部中如何實現，都不能像開始那樣拿到新的b.num。

對比開始的代碼，我們發現問題出在少了b=xx。也就是說這樣寫纔可以：

修改成這樣，就可以保證每次能可以正確的刷新到最新的代碼，並且不用重啓實例了。讀者有興趣的可以研究這個include是怎麼實現的，本文就不深入討論了，因爲這個技巧使用度不高，寫起起來不是很優雅[1]，反而這其中有一個更重要的問題————Java的引用。

Java的引用與傳統引用的區別

要討論這個問題，我們首先要了解Java的引用於其他語言中的一個區別，在C++中引用可以直接修改外部的值：

varobj={name:'Alan'};functiontest1(obj){obj={hello:'world'};//試圖修改外部obj}test1(obj);console.log(obj);//{name:'Alan'}//並沒有修改①functiontest2(obj){obj.name='world';//根據該對象修改其上的屬性}test2(obj);console.log(obj);//{name:'world'}//修改成功②

我們發現與C++不同，根據上面代碼①可知Java中並沒有傳遞一個引用，而是拷貝了一個新的變量，即值傳遞。根據②可知拷貝的這個變量是一個可以訪問到對象屬性的「引用」（與傳統的C++的引用不同，下文中提到的Java的引用都是這種特別的引用）。這裏需要總結一個繞口的結論：Java中均是值傳遞，對象在傳遞的過程中是拷貝了一份新的引用。

varobj={data:{}};//data指向obj.datavardata=obj.data;console.log(data===obj.data);//true-->data所操作的就是obj.datadata.name='Alan';data.test=function(){console.log('hi')};//通過data可以直接修改到data的值console.log(obj)//{data:{name:'Alan',test:[Function]}}data={name:'Bob',add:function(a,b){returna+b;}};//data是一個引用，直接賦值給它，只是讓這個變量等於另外一個引用，並不會修改到obj本身console.log(data);//{name:'Bob',add:[Function]}console.log(obj);//{data:{name:'Alan',test:[Function]}}obj.data={name:'Bob',add:function(a,b){returna+b;}};//而通過obj.data才能真正修改到data本身console.log(obj);//{data:{name:'Bob',add:[Function]}}

通過這個例子我們可以看到，data雖然像一個引用一樣指向了obj.data，並且通過data可以訪問到obj.data上的屬性。但是由於Java值傳遞的特性直接修改data=xxx並不會使得obj.data=xxx。

打個比方最初設置vardata=obj.data的時候，內存中的情況大概是：

然後設置data=xxx，由於data是拷貝的一個新的值，只是這個值是一個引用（指向內存1）罷了。讓它等於另外一個對象就好比：

讓data指向了新的一塊內存2。

如果是傳統的引用（如上文中提到的C++的引用），那麼obj.data本身會變成新的內存2，但Java中均是值傳遞，對象在傳遞的過程中拷貝了一份新的引用。所以這個新拷貝的變量被改變並不影響原本的對象。

上述例子中的obj.data與data的關係，就是Node.js中的module.exports與exports之間的關係。讓我們來看看Node.js中require一個文件時的實際結構：

functionrequire(...){varmodule={exports:{}};((module,exports)=>{//Node.js中文件外部其實被包了一層自執行的函數//這中間是你模塊內部的代碼.functionsome_func(){};exports=some_func;//這樣賦值,exports便不再指向module.exports//而module.exports依舊是{}module.exports=some_func;//這樣設置才能修改到原本的exports})(module,module.exports);returnmodule.exports;}

Node.js中的exports就是拷貝的一份module.exports的引用。通過exports可以修改Node.js當前文件導出的屬性，但是不能修改當前模塊本身。通過module.exports纔可以修改到其本身。表現上來說：

這是二者表現上的區別，其他方面用起來都沒有差別。所以你現在應該知道寫module.exports.xx=xxx;的人其實是多寫了一個module.。

爲了再練習一下，我們在來看一個比較複雜的例子：